import http.client as httplib
import urllib
import time
import RPi.GPIO as GPIO
import time
import DHTlibrary as DHT
DHTPin = 11
key = "ZFS4GTLM49NTZT3Y"
# Put your API Key here
def thermometer():
    dht = DHT.DHT(DHTPin)   #create a DHT class object
    sumCnt = 0 

    while True:
        


        try:
            sumCnt += 1         #counting number of reading times
            chk = dht.readDHT11()     #read DHT11 and get a return value. Then determine whether data read is normal according to the return value.
            print ("The sumCnt is : %d, \t chk    : %d"%(sumCnt,chk))
            if (chk is dht.DHTLIB_OK):      #read DHT11 and get a return value. Then determine whether data read is normal according to the return value.
                print("DHT11,OK!")
            elif(chk is dht.DHTLIB_ERROR_CHECKSUM): #data check has errors
                print("DHTLIB_ERROR_CHECKSUM!!")
            elif(chk is dht.DHTLIB_ERROR_TIMEOUT):  #reading DHT times out
                print("DHTLIB_ERROR_TIMEOUT!")
            else:               #other errors
                print("Other error!")
            with open ('text.txt' , 'a+') as file:
                file.write(str(dht.temperature))
                
            print("Temperature : %.2f \n"%(dht.temperature))

        
        
        
        #Calculate CPU temperature of Raspberry Pi in Degrees C
        # temp = int(open('/sys/class/thermal/thermal_zone0/temp').read()) / 1e3 # Get Raspberry Pi CPU temp
            params = urllib.parse.urlencode({'field1': dht.temperature, 'key':key }) 
            headers = {"Content-typZZe": "application/x-www-form-urlencoded","Accept": "text/plain"}
            conn = httplib.HTTPConnection("api.thingspeak.com:80")    

            
            
            
            
            
            conn.request("POST", "/update", params, headers)
            response = conn.getresponse()

            print (temp)
            print (response.status, response.reason)
            
            # data = response.read()
            # print(data)
            conn.close()
            
        except:

            print ("connection failed")

        
        break
if __name__ == "__main__":
        while True:
            
            thermometer()
